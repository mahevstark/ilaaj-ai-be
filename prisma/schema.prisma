// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastActive  DateTime @default(now())

  // Profile information
  firstName   String?
  lastName    String?
  dateOfBirth String?
  age         Int?
  gender      Gender?
  weight      Float?
  email       String?
  avatar      String?

  // Preferences
  language      String @default("en")
  notifications Boolean @default(true)

  // Relations
  messages    Message[]
  otps        OTP[]
  healthStats HealthStats?

  @@map("users")
}

model OTP {
  id          String   @id @default(cuid())
  phoneNumber String
  code        String   @db.VarChar(6)
  expiresAt   DateTime
  attempts    Int      @default(0)
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User? @relation(fields: [phoneNumber], references: [phoneNumber])

  @@index([phoneNumber, code])
  @@index([expiresAt])
  @@map("otps")
}

model Message {
  id          String      @id @default(cuid())
  userId      String
  phoneNumber String
  sessionId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Content
  text      String?
  type      MessageType @default(TEXT)
  mediaUrl  String?
  mediaType String?
  mediaSize Int?

  // Direction and status
  direction String @default("outbound")
  status    Status @default(SENT)

  // n8n response
  n8nResponse Json?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([phoneNumber, createdAt])
  @@index([sessionId, createdAt])
  @@map("messages")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
}

enum Status {
  SENT
  DELIVERED
  READ
  FAILED
}

model HealthStats {
  id            String   @id @default(cuid())
  userId        String   @unique
  bloodPressure Int      @default(0) // 0-100 percentage
  stomach       Int      @default(0) // 0-100 percentage
  skin          Int      @default(0) // 0-100 percentage
  liver         Int      @default(0) // 0-100 percentage
  head          Int      @default(0) // 0-100 percentage
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_stats")
}
